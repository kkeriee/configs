import os
import re
import logging
import tempfile
import base64
import json
import pycountry
import requests
import time
import socket
import asyncio
import random
from collections import OrderedDict
from urllib.parse import urlparse
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    CallbackQueryHandler,
    CallbackContext
)
import maxminddb
import dns.asyncresolver
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç—Ä–∞–Ω–∞—Ö –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
from country_data import (
    FLAG_COUNTRY_MAP, 
    COUNTRY_PATTERNS, 
    COUNTRY_INSTRUCTIONS,
    get_country_code,
    normalize_country_name
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
MAX_FILE_SIZE = 15 * 1024 * 1024  # 15MB
MAX_MSG_LENGTH = 4000
MAX_CONCURRENT_DNS = 50  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö DNS-–∑–∞–ø—Ä–æ—Å–æ–≤
MAX_CONFIGS = 40000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
PROGRESS_UPDATE_INTERVAL = 2.0  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ (—Å–µ–∫—É–Ω–¥—ã)
GEOLOCATION_TIMEOUT = 15.0  # –¢–∞–π–º–∞—É—Ç –¥–ª—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ (—Å–µ–∫—É–Ω–¥—ã)
DNS_TIMEOUT = 8.0  # –¢–∞–π–º–∞—É—Ç –¥–ª—è DNS-–∑–∞–ø—Ä–æ—Å–æ–≤ (—Å–µ–∫—É–Ω–¥—ã)
CACHE_MAX_SIZE = 5000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫—ç—à–µ–π
CACHE_TTL = 3600  # –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
START, WAITING_FILE, WAITING_COUNTRY, WAITING_NUMBER = range(4)

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã
SUPPORTED_PROTOCOLS = ['vmess', 'vless', 'trojan', 'ss', 'ssr', 'socks', 'http', 'https']

def clear_temporary_data(context: CallbackContext):
    """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ user_data"""
    keys_to_clear = [
        'matched_configs', 'current_index', 'stop_sending',
        'strict_in_progress', 'stop_strict_search', 'progress_message_id',
        'progress_last_update', 'stop_simple_search', 'simple_search_in_progress'
    ]
    for key in keys_to_clear:
        if key in context.user_data:
            del context.user_data[key]

def create_progress_bar(progress: float, length: int = 20) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ—Ç—Ä–∏—Å–æ–≤–∫–æ–π"""
    filled = int(progress / 100 * length)
    empty = length - filled
    return '‚ñà' * filled + '‚ñë' * empty

def is_config_relevant(config: str, target_country: str, country_codes: list) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–∏—Å–∫–æ–º
    
    –û–°–ù–û–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —É–ª—É—á—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç—Ä–∞–Ω –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
    —Ñ–æ—Ä–º–∞—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–º—É –≤ COUNTRY_PATTERNS
    """
    config_lower = config.lower()
    
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ country_codes - —ç—Ç–æ —Å–ø–∏—Å–æ–∫
    if not isinstance(country_codes, list):
        country_codes = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –¥–æ–º–µ–Ω—É
    domain = extract_domain(config)
    if domain:
        tld = domain.split('.')[-1].lower()
        if tld in country_codes:
            return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π —Ü–µ–ª–µ–≤–æ–π —Å—Ç—Ä–∞–Ω—ã
    return detect_by_keywords(config_lower, target_country)

def detect_by_keywords(config_lower: str, target_country: str) -> bool:
    """
    –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    
    –û–°–ù–û–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã –¥–ª—è
    –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤ COUNTRY_PATTERNS
    """
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ü–µ–ª–µ–≤—É—é —Å—Ç—Ä–∞–Ω—É –∫ —Ñ–æ—Ä–º–∞—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–º—É –≤ COUNTRY_PATTERNS
    normalized_target = normalize_country_name(target_country)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–∞—è —Å—Ç—Ä–∞–Ω–∞ –≤ –Ω–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    if normalized_target not in COUNTRY_PATTERNS:
        logger.warning(f"–°—Ç—Ä–∞–Ω–∞ '{target_country}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ COUNTRY_PATTERNS. –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ –∫–∞–∫: '{normalized_target}'")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã
    for pattern in COUNTRY_PATTERNS[normalized_target]:
        if re.search(pattern, config_lower):
            return True
    
    return False

def extract_host(config: str) -> str:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ö–æ—Å—Ç–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
    try:
        # VMess
        if config.startswith('vmess://'):
            try:
                encoded = config.split('://')[1].split('?')[0]
                padding = '=' * (-len(encoded) % 4)
                decoded = base64.b64decode(encoded + padding).decode('utf-8', errors='replace')
                json_data = json.loads(decoded)
                return json_data.get('host') or json_data.get('add', '')
            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è VMess: {e}")
        
        # VLESS
        if config.startswith('vless://'):
            try:
                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ö–æ—Å—Ç–∞ –∏–∑ URL
                url = config.split('://')[1].split('?')[0]
                host = url.split('@')[1].split(':')[0]
                return host
            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ VLESS: {e}")
        
        # Trojan
        if config.startswith('trojan://'):
            try:
                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ö–æ—Å—Ç–∞ –∏–∑ URL
                url = config.split('://')[1].split('?')[0]
                host = url.split('@')[1].split(':')[0]
                return host
            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Trojan: {e}")
        
        # –û–±—â–∏–π —Å–ª—É—á–∞–π
        patterns = [
            r'\b(?:\d{1,3}\.){3}\d{1,3}\b',  # IPv4
            r'([a-z0-9]+(-[a-z0-9]+)*\.)+[a-z]{2,}',  # –î–æ–º–µ–Ω
            r'@([\w\.-]+):?',  # –§–æ—Ä–º–∞—Ç user@host:port
            r'host\s*[:=]\s*"([^"]+)"',  # JSON-—Ñ–æ—Ä–º–∞—Ç
            r'address\s*=\s*([\w\.-]+)'  # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        ]
        for pattern in patterns:
            match = re.search(pattern, config, re.IGNORECASE)
            if match:
                return match.group(0)
    except Exception as e:
        logger.debug(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ö–æ—Å—Ç–∞: {e}")
    return None

def extract_domain(config: str) -> str:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–æ–º–µ–Ω–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
    try:
        url_match = re.search(r'(?:https?://)?([a-z0-9.-]+\.[a-z]{2,})', config, re.IGNORECASE)
        if url_match:
            return url_match.group(1)
        domain_match = re.search(r'\b(?:[a-z0-9]+(-[a-z0-9]+)*\.)+[a-z]{2,}\b', config, re.IGNORECASE)
        if domain_match:
            return domain_match.group(0)
    except Exception as e:
        logger.debug(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–æ–º–µ–Ω–∞: {e}")
    return None

async def generate_country_instructions(country: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è —Å—Ç—Ä–∞–Ω—ã"""
    return COUNTRY_INSTRUCTIONS.get(country.lower(), f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –¥–ª—è {country}")

async def start_check(update: Update, context: CallbackContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥–æ–≤ —Å –≤—ã–±–æ—Ä–æ–º –¥–µ–π—Å—Ç–≤–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫—Ä–æ–º–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    if update.message.from_user.id != 1040929628 and not check_rate_limit(update.message.from_user.id):
        await update.message.reply_text("‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É.")
        return ConversationHandler.END
    
    clear_temporary_data(context)
    user_id = update.message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    if 'configs' in context.user_data and context.user_data['configs'] and 'last_country' in context.user_data:
        keyboard = [
            [InlineKeyboardButton("üåç –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª", callback_data='use_current_file')],
            [InlineKeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª", callback_data='new_file')],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ñ–∞–π–ª: {context.user_data['file_name']}\n"
            f"–ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∞: {context.user_data['last_country']}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
        return START
    else:
        await update.message.reply_text(
            "üìé –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏.\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏ (–º–∞–∫—Å. 15MB)."
        )
        return WAITING_FILE

async def handle_file(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏"""
    document = update.message.document
    user = update.message.from_user
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
    if document.file_size > MAX_FILE_SIZE:
        await update.message.reply_text(
            f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {MAX_FILE_SIZE/(1024*1024)}MB"
        )
        return WAITING_FILE
    
    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    try:
        file = await context.bot.get_file(document.file_id)
        file_path = os.path.join(tempfile.gettempdir(), document.file_name)
        await file.download_to_drive(file_path)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return WAITING_FILE
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
    try:
        with open(file_path, 'r', encoding='utf-8', errors='replace') as f:
            content = f.read()
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
        configs = []
        current_config = []
        max_lines = 10000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –Ω–∞ –∫–æ–Ω—Ñ–∏–≥
        line_count = 0
        
        for line in content.splitlines():
            line_count += 1
            if line_count > max_lines:
                break
                
            stripped = line.strip()
            if stripped:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞
                if any(stripped.startswith(proto + "://") for proto in SUPPORTED_PROTOCOLS):
                    if current_config:
                        configs.append("".join(current_config))
                        current_config = []
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
                    if len(configs) >= MAX_CONFIGS:
                        break
                current_config.append(stripped)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–Ω—Ñ–∏–≥
        if current_config and len(configs) < MAX_CONFIGS:
            configs.append("".join(current_config))
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.unlink(file_path)
        context.user_data['configs'] = configs
        context.user_data['file_name'] = document.file_name
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–∞–π–ª: {document.file_name} ({len(configs)} –∫–æ–Ω—Ñ–∏–≥–æ–≤)")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if len(configs) == 0:
            await update.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª–µ.")
            return ConversationHandler.END
        
        keyboard = [
            [InlineKeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ —Ñ–∞–π–ª", callback_data='add_file')],
            [InlineKeyboardButton("üåç –£–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω—É", callback_data='set_country')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            f"‚úÖ –§–∞–π–ª '{document.file_name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω ({len(configs)} –∫–æ–Ω—Ñ–∏–≥–æ–≤). –í—ã –º–æ–∂–µ—Ç–µ:",
            reply_markup=reply_markup
        )
        return START
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}", exc_info=True)
        os.unlink(file_path)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª.")
        return WAITING_FILE

async def handle_country(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã"""
    text = update.message.text.strip()
    user_id = update.message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ç–µ–∫—Å—Ç —è–≤–ª—è–µ—Ç—Å—è —Ñ–ª–∞–≥–æ–º
    if text in FLAG_COUNTRY_MAP:
        country_name = FLAG_COUNTRY_MAP[text]
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã
        normalized_country = normalize_country_name(country_name)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç—Ä–∞–Ω–µ
        context.user_data['country'] = country_name
        context.user_data['target_country'] = normalized_country
        context.user_data['country_codes'] = get_country_code(normalized_country)
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª —Å—Ç—Ä–∞–Ω—É: {country_name} ({normalized_country})")
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –ø–æ–∏—Å–∫–∞
        keyboard = [
            [InlineKeyboardButton("üîç –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ (–±—ã—Å—Ç—Ä—ã–π)", callback_data='simple_search')],
            [InlineKeyboardButton("üîç –°—Ç—Ä–æ–≥–∏–π –ø–æ–∏—Å–∫ (—Ç–æ—á–Ω—ã–π)", callback_data='strict_search')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_country')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            f"üåç –°—Ç—Ä–∞–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {country_name}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞:",
            reply_markup=reply_markup
        )
        return START
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–ª–∞–≥ —Å—Ç—Ä–∞–Ω—ã.\n"
            "–ü—Ä–∏–º–µ—Ä—ã: üá∑üá∫, üá∫üá∏, üá©üá™, üá±üáª, üá±üáπ"
        )
        return WAITING_COUNTRY

async def simple_search(update: Update, context: CallbackContext):
    """–ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –∫–æ–Ω—Ñ–∏–≥–æ–≤ —Ç–æ–ª—å–∫–æ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∏ –¥–æ–º–µ–Ω–∞–º"""
    user_id = update.callback_query.from_user.id if update.callback_query else update.message.from_user.id
    configs = context.user_data.get('configs', [])
    target_country = context.user_data.get('target_country', '')
    country_codes = context.user_data.get('country_codes', [])
    
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ country_codes - —ç—Ç–æ —Å–ø–∏—Å–æ–∫
    if not isinstance(country_codes, list):
        country_codes = []
    
    logger.info(f"–ù–∞—á–∞–ª–æ –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–æ–∏—Å–∫–∞. –ö–æ–Ω—Ñ–∏–≥–æ–≤: {len(configs)}, –°—Ç—Ä–∞–Ω–∞: {target_country}, –ö–æ–¥—ã —Å—Ç—Ä–∞–Ω—ã: {country_codes}")
    
    if not configs or not target_country:
        await context.bot.send_message(chat_id=user_id, text="‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return ConversationHandler.END

    start_time = time.time()
    matched_configs = []
    progress_msg = await context.bot.send_message(chat_id=user_id, text="üîé –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫...")
    total_configs = len(configs)
    processed = 0
    context.user_data['simple_search_in_progress'] = True
    
    try:
        for i, config in enumerate(configs):
            if context.user_data.get('stop_simple_search'):
                break
            try:
                is_relevant = is_config_relevant(config, target_country, country_codes)
                if is_relevant:
                    matched_configs.append(config)
                    logger.debug(f"–ö–æ–Ω—Ñ–∏–≥ #{i} —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç—Ä–∞–Ω–µ {target_country}")
                else:
                    logger.debug(f"–ö–æ–Ω—Ñ–∏–≥ #{i} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç—Ä–∞–Ω–µ {target_country}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞ #{i}: {e}", exc_info=True)
            processed += 1
            # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            if time.time() - context.user_data.get('progress_last_update', 0) > PROGRESS_UPDATE_INTERVAL or i == total_configs - 1:
                progress = min(processed / total_configs * 100, 100)
                progress_bar = create_progress_bar(progress)
                await context.bot.edit_message_text(
                    chat_id=user_id,
                    message_id=progress_msg.message_id,
                    text=f"üîé –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫: {progress_bar} {progress:.1f}%\n"
                         f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed}/{total_configs}")
                context.user_data['progress_last_update'] = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            if context.user_data.get('stop_simple_search'):
                break
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(matched_configs)} –∫–æ–Ω—Ñ–∏–≥–æ–≤ –¥–ª—è {target_country}, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–Ω—è–ª–∞ {time.time()-start_time:.2f} —Å–µ–∫")
        
        context.user_data['simple_search_in_progress'] = False
        
        if not matched_configs:
            await context.bot.edit_message_text(
                chat_id=user_id,
                message_id=progress_msg.message_id,
                text=f"‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è {target_country} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return ConversationHandler.END
        
        context.user_data['matched_configs'] = matched_configs
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        await context.bot.edit_message_text(
            chat_id=user_id,
            message_id=progress_msg.message_id,
            text=f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(matched_configs)} –∫–æ–Ω—Ñ–∏–≥–æ–≤ –¥–ª—è {target_country}!")
        
        await context.bot.send_message(
            chat_id=user_id,
            text=f"üåç –î–ª—è —Å—Ç—Ä–∞–Ω—ã {target_country} –Ω–∞–π–¥–µ–Ω–æ {len(matched_configs)} –∫–æ–Ω—Ñ–∏–≥–æ–≤. –°–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–∏–≥–æ–≤ –ø—Ä–∏—Å–ª–∞—Ç—å? (–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(matched_configs)})")
        
        return WAITING_NUMBER
    except Exception as e:
        context.user_data['simple_search_in_progress'] = False
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–æ–∏—Å–∫–∞: {e}", exc_info=True)
        await context.bot.edit_message_text(
            chat_id=user_id,
            message_id=progress_msg.message_id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å—Ç–æ–º –ø–æ–∏—Å–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π.")
        return ConversationHandler.END

async def strict_search(update: Update, context: CallbackContext):
    """–°—Ç—Ä–æ–≥–∏–π –ø–æ–∏—Å–∫ –∫–æ–Ω—Ñ–∏–≥–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    user_id = update.callback_query.from_user.id if update.callback_query else update.message.from_user.id
    configs = context.user_data.get('configs', [])
    target_country = context.user_data.get('target_country', '')
    
    if not configs or not target_country:
        await context.bot.send_message(chat_id=user_id, text="‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return ConversationHandler.END

    start_time = time.time()
    valid_configs = []
    progress_msg = await context.bot.send_message(chat_id=user_id, text="üîé –ù–∞—á–∏–Ω–∞—é —Å—Ç—Ä–æ–≥–∏–π –ø–æ–∏—Å–∫...")
    total_configs = len(configs)
    processed = 0
    context.user_data['strict_in_progress'] = True
    
    try:
        # –≠—Ç–∞–ø 1: –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–±–æ—Ä –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        prelim_configs = []
        for i, config in enumerate(configs):
            if context.user_data.get('stop_strict_search'):
                break
            try:
                if is_config_relevant(config, target_country, context.user_data['country_codes']):
                    prelim_configs.append(config)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞ #{i}: {e}")
            processed += 1
            # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            if time.time() - context.user_data.get('progress_last_update', 0) > PROGRESS_UPDATE_INTERVAL or i == total_configs - 1:
                progress = min(processed / total_configs * 100, 100)
                progress_bar = create_progress_bar(progress)
                await context.bot.edit_message_text(
                    chat_id=user_id,
                    message_id=progress_msg.message_id,
                    text=f"üîé –≠—Ç–∞–ø 1: {progress_bar} {progress:.1f}%\n"
                         f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed}/{total_configs}")
                context.user_data['progress_last_update'] = time.time()
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            if context.user_data.get('stop_strict_search'):
                break
        
        logger.info(f"–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –Ω–∞–π–¥–µ–Ω–æ {len(prelim_configs)} –∫–æ–Ω—Ñ–∏–≥–æ–≤, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–Ω—è–ª–∞ {time.time()-start_time:.2f} —Å–µ–∫")
        
        if not prelim_configs:
            await context.bot.edit_message_text(
                chat_id=user_id,
                message_id=progress_msg.message_id,
                text=f"‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è {target_country} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return ConversationHandler.END
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥–æ–≤ –ø–æ —Ö–æ—Å—Ç–∞–º
        host_to_configs = {}
        configs_without_host = 0
        for config in prelim_configs:
            host = extract_host(config)
            if host:
                if host not in host_to_configs:
                    host_to_configs[host] = []
                host_to_configs[host].append(config)
            else:
                configs_without_host += 1
        
        unique_hosts = list(host_to_configs.keys())
        total_hosts = len(unique_hosts)
        logger.info(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ö–æ—Å—Ç–æ–≤: {total_hosts}, –∫–æ–Ω—Ñ–∏–≥–æ–≤ –±–µ–∑ —Ö–æ—Å—Ç–∞: {configs_without_host}")
        
        if not unique_hosts:
            await context.bot.edit_message_text(
                chat_id=user_id,
                message_id=progress_msg.message_id,
                text=f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ö–æ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.")
            return ConversationHandler.END
        
        # –≠—Ç–∞–ø 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ö–æ—Å—Ç–æ–≤
        host_country_map = {}
        total_processed = 0
        stop_search = False
        
        for host in unique_hosts:
            if context.user_data.get('stop_strict_search'):
                stop_search = True
                break
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º IP-–∞–¥—Ä–µ—Å —Ö–æ—Å—Ç–∞
                ip = socket.gethostbyname(host)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
                with geoip_db_lock:
                    if geoip_db:
                        try:
                            match = geoip_db.get(ip)
                            if match and 'country' in match:
                                country_iso = match['country']['iso_code'].lower()
                                host_country_map[host] = country_iso
                        except Exception as e:
                            logger.debug(f"–û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è {host}: {e}")
            except Exception as e:
                logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑—Ä–µ—à–∏—Ç—å {host}: {e}")
            
            total_processed += 1
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            if time.time() - context.user_data.get('progress_last_update', 0) > PROGRESS_UPDATE_INTERVAL:
                progress = min(total_processed / total_hosts * 100, 100)
                progress_bar = create_progress_bar(progress)
                await context.bot.edit_message_text(
                    chat_id=user_id,
                    message_id=progress_msg.message_id,
                    text=f"üîé –≠—Ç–∞–ø 2: {progress_bar} {progress:.1f}%\n"
                         f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_processed}/{total_hosts}")
                context.user_data['progress_last_update'] = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            if context.user_data.get('stop_strict_search'):
                stop_search = True
                break
        
        # –°–±–æ—Ä –≤–∞–ª–∏–¥–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤
        for host in unique_hosts:
            if context.user_data.get('stop_strict_search'):
                break
            country = host_country_map.get(host)
            if country and country.lower() == target_country.split()[-1].lower():
                valid_configs.extend(host_to_configs[host])
        
        total_time = time.time() - start_time
        context.user_data['strict_in_progress'] = False
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if context.user_data.get('stop_strict_search'):
            await context.bot.edit_message_text(
                chat_id=user_id,
                message_id=progress_msg.message_id,
                text=f"‚èπ –°—Ç—Ä–æ–≥–∏–π –ø–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ù–∞–π–¥–µ–Ω–æ {len(valid_configs)} –∫–æ–Ω—Ñ–∏–≥–æ–≤.")
        else:
            await context.bot.edit_message_text(
                chat_id=user_id,
                message_id=progress_msg.message_id,
                text=f"‚úÖ –°—Ç—Ä–æ–≥–∏–π –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {total_time:.2f} —Å–µ–∫. –ù–∞–π–¥–µ–Ω–æ {len(valid_configs)} –∫–æ–Ω—Ñ–∏–≥–æ–≤.")
        
        if not valid_configs:
            await context.bot.send_message(chat_id=user_id, text="‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return ConversationHandler.END
        
        context.user_data['matched_configs'] = valid_configs
        await context.bot.send_message(
            chat_id=user_id,
            text=f"üåç –î–ª—è —Å—Ç—Ä–∞–Ω—ã {target_country} –Ω–∞–π–¥–µ–Ω–æ {len(valid_configs)} –≤–∞–ª–∏–¥–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤! –°–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–∏–≥–æ–≤ –ø—Ä–∏—Å–ª–∞—Ç—å? (–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(valid_configs)})")
        return WAITING_NUMBER
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç—Ä–æ–≥–æ–≥–æ –ø–æ–∏—Å–∫–∞: {e}", exc_info=True)
        context.user_data['strict_in_progress'] = False
        await context.bot.edit_message_text(
            chat_id=user_id,
            message_id=progress_msg.message_id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç—Ä–æ–≥–æ–º –ø–æ–∏—Å–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π.")
        return ConversationHandler.END

async def handle_number(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ñ–∏–≥–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
    user_input = update.message.text
    user_id = update.message.from_user.id
    try:
        num = int(user_input)
        matched_configs = context.user_data.get('matched_configs', [])
        total = len(matched_configs)
        if num < 1:
            num = 1
        if num > total:
            num = total
        
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏ –≤—ã–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ñ–∏–≥–∏
        random.shuffle(matched_configs)
        selected_configs = matched_configs[:num]
        context.user_data['matched_configs'] = selected_configs
        context.user_data['stop_sending'] = False
        context.user_data['progress_last_update'] = time.time()
        
        await update.message.reply_text(f"‚è´ –ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É {num} –∫–æ–Ω—Ñ–∏–≥–æ–≤...")
        await send_configs(update, context)
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return WAITING_NUMBER
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ñ–∏–≥–æ–≤: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
        return WAITING_NUMBER

async def send_configs(update: Update, context: CallbackContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
    user_id = update.message.from_user.id
    matched_configs = context.user_data.get('matched_configs', [])
    country_name = context.user_data.get('country', '')
    stop_sending = context.user_data.get('stop_sending', False)
    
    if not matched_configs:
        await context.bot.send_message(chat_id=user_id, text="‚ùå –ù–µ—Ç –∫–æ–Ω—Ñ–∏–≥–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
        return ConversationHandler.END
    
    if stop_sending:
        await context.bot.send_message(chat_id=user_id, text="‚èπ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        return ConversationHandler.END
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    header = f"–ö–æ–Ω—Ñ–∏–≥–∏ –¥–ª—è {country_name}:"
    messages = []
    current_message = header
    
    for config in matched_configs:
        config_line = f"{config}\n"
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –ª–∏–º–∏—Ç
        if len(current_message) + len(config_line) > MAX_MSG_LENGTH:
            messages.append(current_message)
            current_message = header + config_line  # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞
        
        # –ï—Å–ª–∏ –¥–∞–∂–µ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è
        if len(config_line) > MAX_MSG_LENGTH:
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –Ω–∞ —á–∞—Å—Ç–∏
            for i in range(0, len(config_line), MAX_MSG_LENGTH - len(header) - 1):
                part = config_line[i:i + MAX_MSG_LENGTH - len(header) - 1]
                messages.append(header + part)
        else:
            current_message += config_line
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if len(current_message) > len(header):
        messages.append(current_message)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    for i, message in enumerate(messages):
        if context.user_data.get('stop_sending'):
            break
        
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=message,
                disable_web_page_preview=True
            )
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            if time.time() - context.user_data.get('progress_last_update', 0) > PROGRESS_UPDATE_INTERVAL:
                progress = min((i + 1) / len(messages) * 100, 100)
                progress_bar = create_progress_bar(progress)
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞: {progress_bar} {progress:.1f}%"
                )
                context.user_data['progress_last_update'] = time.time()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞—Å—Ç–∏ {i+1}. –ü—Ä–æ–¥–æ–ª–∂–∞—é..."
                )
            except Exception as e2:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e2}")
    
    await context.bot.send_message(chat_id=user_id, text="‚úÖ –í—Å–µ –∫–æ–Ω—Ñ–∏–≥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
    context.user_data['last_country'] = context.user_data['country']
    clear_temporary_data(context)
    return ConversationHandler.END

async def button_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫—Ä–æ–º–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    if query.from_user.id != 1040929628 and not check_rate_limit(query.from_user.id):
        await query.edit_message_text("‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É.")
        return ConversationHandler.END
    
    if query.data == 'add_file':
        await query.edit_message_text("üìé –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏.")
        return WAITING_FILE
    elif query.data == 'set_country':
        await query.edit_message_text("üåç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–ª–∞–≥ —Å—Ç—Ä–∞–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: üá∑üá∫, üá∫üá∏, üá©üá™):")
        return WAITING_COUNTRY
    elif query.data == 'use_current_file':
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Å—Ç—Ä–∞–Ω—É
        await query.edit_message_text("üåç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–ª–∞–≥ —Å—Ç—Ä–∞–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: üá∑üá∫, üá∫üá∏, üá©üá™):")
        return WAITING_COUNTRY
    elif query.data == 'new_file':
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        clear_temporary_data(context)
        await query.edit_message_text("üìé –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏.")
        return WAITING_FILE
    elif query.data == 'cancel':
        await cancel(update, context)
        return ConversationHandler.END
    elif query.data == 'simple_search':
        await simple_search(update, context)
        return WAITING_NUMBER
    elif query.data == 'strict_search':
        await strict_search(update, context)
        return WAITING_NUMBER
    elif query.data == 'stop_sending':
        context.user_data['stop_sending'] = True
        await query.edit_message_text("‚èπ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        return ConversationHandler.END
    elif query.data == 'stop_strict_search':
        context.user_data['stop_strict_search'] = True
        await query.edit_message_text("‚èπ –°—Ç—Ä–æ–≥–∏–π –ø–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        return ConversationHandler.END
    elif query.data == 'stop_simple_search':
        context.user_data['stop_simple_search'] = True
        await query.edit_message_text("‚èπ –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        return ConversationHandler.END
    elif query.data == 'back_to_country':
        await query.edit_message_text("üåç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–ª–∞–≥ —Å—Ç—Ä–∞–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: üá∑üá∫, üá∫üá∏, üá©üá™):")
        return WAITING_COUNTRY
    
    return context.user_data.get('current_state', WAITING_COUNTRY)

async def cancel(update: Update, context: CallbackContext):
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –æ—á–∏—Å—Ç–∫–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
    global geoip_file_path
    
    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    clear_temporary_data(context)
    
    # –û—Ç–º–µ–Ω–∞ –ø–æ–∏—Å–∫–∞
    if 'strict_in_progress' in context.user_data:
        context.user_data['stop_strict_search'] = True
    if 'simple_search_in_progress' in context.user_data:
        context.user_data['stop_simple_search'] = True
    
    await update.callback_query.edit_message_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.") if update.callback_query else await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

def check_rate_limit(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
    
    –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID 1040929628 –Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    """
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID 1040929628 –Ω–µ –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    if user_id == 1040929628:
        return True
    
    # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
    current_time = time.time()
    user_key = f"rate_limit:{user_id}"
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ user_data
    request_history = context.user_data.get(user_key, [])
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
    request_history = [t for t in request_history if current_time - t < 60]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
    if len(request_history) >= 5:  # 5 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
        return False
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    request_history.append(current_time)
    context.user_data[user_key] = request_history
    
    return True

def post_init(application: Application) -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏...")
        if not initialize_geoip_database_sync():
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏. –°—Ç—Ä–æ–≥–∏–π –ø–æ–∏—Å–∫ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            logger.info("–ë–∞–∑–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: {e}", exc_info=True)

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
    application = Application.builder().token(TOKEN).post_init(post_init).build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("check_configs", start_check)],
        states={
            START: [
                CallbackQueryHandler(button_handler)
            ],
            WAITING_FILE: [
                MessageHandler(filters.Document.TEXT, handle_file),
                CallbackQueryHandler(button_handler)
            ],
            WAITING_COUNTRY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_country),
                CallbackQueryHandler(button_handler)
            ],
            WAITING_NUMBER: [
                MessageHandler(filters.Regex(r'^\d+$'), handle_number),
                CallbackQueryHandler(button_handler)
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        per_user=True,
        per_chat=True
    )
    
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("start", start_check))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    application.run_polling()

if __name__ == '__main__':
    main()
